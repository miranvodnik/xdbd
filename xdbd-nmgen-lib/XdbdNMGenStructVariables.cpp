/*
 * XdbdNMGenStructVariables.cpp
 *
 *  Created on: 11. feb. 2016
 *      Author: miran
 */

#include "XdbdNMGenStructVariables.h"

namespace xml_db_daemon
{

/*! @brief 'struct_variables' descriptor constructor
 *
 */
XdbdNMGenStructVariables::XdbdNMGenStructVariables ()
{
}

/*! @brief 'struct_variables' descriptor destructor
 *
 */
XdbdNMGenStructVariables::~XdbdNMGenStructVariables ()
{
}

/*! @brief read sub-nodes
 *
 *  read collection of 'struct' nodes and save them into
 *  superclass's m_nmlist. Other nodes are ignored
 *
 *  @param node reference to XML 'struct_variables' node
 *
 *  @return 0 always
 *
 */
int XdbdNMGenStructVariables::ReadSubNodes (xmlNodePtr node)
{
	for (xmlNodePtr child = node->children; child != 0; child = child->next)
	{
		string name = (char*) child->name;
		if (name == g_struct)
		{
			XdbdNMGenStruct* str = new XdbdNMGenStruct ();
			str->ReadSubNodes (child);
			m_nmlist.push_back (str);
		}
		else
		{

		}
	}
	return 0;
}

/*! @brief read attributes
 *
 *  since this node has no attributes, this function does
 *  nothing
 *
 *  @param node reference to XML 'struct_variables' node
 *
 *  @return 0 always
 *
 */
int XdbdNMGenStructVariables::ReadAttributes (xmlNodePtr node)
{
	return 0;
}

/*! @brief generate code
 *
 *  all code is generated by collection of 'struct' sub-nodes
 *
 *  @param dataCount size of data[] table - should be 2
 *  @param data code generation parameters - code generation flag
 *  and reference to output file object
 *
 *  @return 0 always
 *
 */
int XdbdNMGenStructVariables::GenerateCode (int dataCount, void* data [])
{
	for (nmlist::iterator it = m_nmlist.begin (); it != m_nmlist.end (); ++it)
		(*it)->GenerateCode (dataCount, data);
	return 0;
}

/*! @brief check column usage
 *
 *  recursively check usage of specific DB column in generated
 *  code
 *
 *  @param name name of DB column
 *
 *  @return true column name found in generated code
 *  @return false column name not found in generated code
 *
 */
bool XdbdNMGenStructVariables::CheckColumnUsage (const char* name)
{
	for (nmlist::iterator it = m_nmlist.begin (); it != m_nmlist.end (); ++it)
		if ((*it)->CheckColumnUsage(name))
			return	true;
	return false;
}

} /* namespace xml_db_daemon */
