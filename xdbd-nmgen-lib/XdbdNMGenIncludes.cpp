/*
 * XdbdNMGenIncludes.cpp
 *
 *  Created on: 11. feb. 2016
 *      Author: miran
 */

#include "XdbdNMGenIncludes.h"

namespace xml_db_daemon
{

/*! @brief 'includes' descriptor constructor
 *
 */
XdbdNMGenIncludes::XdbdNMGenIncludes ()
{
}

/*! @brief 'includes' descriptor destructor
 *
 */
XdbdNMGenIncludes::~XdbdNMGenIncludes ()
{
}

/*! @brief read sub-nodes
 *
 *  valid sub-nodes of 'includes' node are only 'unit'
 *  nodes. All of them are saved in superclass's m_nmlist.
 *  Nodes with other names are ignored.
 *
 *  @param node reference to XML 'includes' node
 *
 *  @return 0 always
 *
 */
int XdbdNMGenIncludes::ReadSubNodes (xmlNodePtr node)
{
	for (xmlNodePtr child = node->children; child != 0; child = child->next)
	{
		string name = (char*) child->name;
		if (name == g_unit)
		{
			XdbdNMGenUnit* unit = new XdbdNMGenUnit ();
			unit->ReadSubNodes (child);
			m_nmlist.push_back (unit);
		}
		else
		{

		}
	}
	return 0;
}

/*! @brief read attributes
 *
 *  since 'includes' node has no attributes, this function
 *  does nothing
 *
 *  @param node reference to XML 'includes' node
 *
 *  @return 0 always
 *
 */
int XdbdNMGenIncludes::ReadAttributes (xmlNodePtr node)
{
	return 0;
}

/*! @brief generate code
 *
 *  all code is generated by sub-nodes
 *
 *  @param dataCount size of data[] table - should be 2
 *  @param data code generation parameters - code generation flag
 *  and reference to output file object
 *
 *  @return 0 always
 *
 */
int XdbdNMGenIncludes::GenerateCode (int dataCount, void* data [])
{
	if (this == 0)
		return 0;
	for (nmlist::iterator it = m_nmlist.begin (); it != m_nmlist.end (); ++it)
		(*it)->GenerateCode (dataCount, data);
	return 0;
}

/*! @brief check column usage
 *
 *  recursively check usage of specific DB column in generated
 *  code
 *
 *  @param name name of DB column
 *
 *  @return true column name found in generated code
 *  @return false column name not found in generated code
 *
 */
bool XdbdNMGenIncludes::CheckColumnUsage (const char* name)
{
	if (this == 0)
		return false;
	for (nmlist::iterator it = m_nmlist.begin (); it != m_nmlist.end (); ++it)
		if ((*it)->CheckColumnUsage(name))
			return	true;
	return false;
}

} /* namespace xml_db_daemon */
