/*
 * XdbdNMGenMQNotification.cpp
 *
 *  Created on: 11. feb. 2016
 *      Author: miran
 */

#include "XdbdNMGenMQNotification.h"

namespace xml_db_daemon
{

/*! @brief constructor of 'MQ_notification' descriptor
 *
 *  it initializes references to 'events', 'includes' and
 *  'variables' descriptors
 *
 */
XdbdNMGenMQNotification::XdbdNMGenMQNotification ()
{
	m_events = 0;
	m_includes = 0;
	m_variables = 0;
}

/*! @brief destructor of 'MQ_notification' descriptor
 *
 *  it releases 'events', 'includes' and 'variables' descriptors
 *
 */
XdbdNMGenMQNotification::~XdbdNMGenMQNotification ()
{
	delete m_events;
	delete m_includes;
	delete m_variables;
}

/*! @brief read sub-nodes
 *
 *  it reads 'events', 'includes' and 'variables' sub-nodes
 *  if they are present, but only one (the last one) of each.
 *  Other sub-nodes are ignored
 *
 *  @param node reference to XML 'MQ_notification' node
 *
 *  @return 0 always
 *
 */
int XdbdNMGenMQNotification::ReadSubNodes (xmlNodePtr node)
{
	for (xmlNodePtr child = node->children; child != 0; child = child->next)
	{
		string name = (char*) child->name;
		if (name == g_events)
		{
			delete m_events;
			m_events = new XdbdNMGenEvents ();
			m_events->ReadSubNodes (child);
		}
		else if (name == g_includes)
		{
			delete m_includes;
			m_includes = new XdbdNMGenIncludes ();
			m_includes->ReadSubNodes (child);
		}
		else if (name == g_struct_variables)
		{
			delete m_variables;
			m_variables = new XdbdNMGenStructVariables ();
			m_variables->ReadSubNodes (child);
		}
		else
		{

		}
	}
	return 0;
}

/*! @brief read attributes
 *
 *  since 'MQ_notification' node has no attributes, this function
 *  does nothing
 *
 *  @param node reference to XML 'MQ_notification' node
 *
 *  @return 0 always
 *
 */
int XdbdNMGenMQNotification::ReadAttributes (xmlNodePtr node)
{
	return 0;
}

/*! @brief generate code
 *
 *  all code is generated by sub-nodes
 *
 *  @param dataCount size of data[] table - should be 2
 *  @param data code generation parameters - code generation flag
 *  and reference to output file object
 *
 *  @return 0 always
 *
 */
int XdbdNMGenMQNotification::GenerateCode (int dataCount, void* data [])
{
	switch ((GenerateFlags) (long) data [0])
	{
	case GenerateIncludes:
		if (m_includes != 0)
			m_includes->GenerateCode (dataCount, data);
		break;
	case GenerateStructures:
		if (m_variables != 0)
			m_variables->GenerateCode (dataCount, data);
		break;
	case GenerateMQDefinitions:
	case GenerateMQInitializations:
	case GenerateImplementation:
		if (m_events != 0)
			m_events->GenerateCode (dataCount, data);
		break;
	default:
		break;
	}
	return 0;
}

/*! @brief check column usage
 *
 *  recursively check usage of specific DB column in generated
 *  code
 *
 *  @param name name of DB column
 *
 *  @return true column name found in generated code
 *  @return false column name not found in generated code
 *
 */
bool XdbdNMGenMQNotification::CheckColumnUsage (const char* name)
{
	return	((m_includes != 0) && m_includes->CheckColumnUsage(name)) ||
		((m_variables != 0) && m_variables->CheckColumnUsage(name)) ||
		((m_events != 0) && m_events->CheckColumnUsage(name));
}

} /* namespace xml_db_daemon */
